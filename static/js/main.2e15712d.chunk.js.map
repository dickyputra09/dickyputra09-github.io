{"version":3,"sources":["UserList.js","companies.js","NotFound.js","ChartBankSampah.js","ChartNasabah.js","Dashboard.js","addUploadFeature.js","App.js","serviceWorker.js","index.js"],"names":["UserList","props","react_default","a","createElement","List","Datagrid","TextField","source","EmailField","CompaniesList","NotFound","Card_default","Title","title","CardContent_default","ReactFC","fcRoot","FusionCharts","Charts","FusionTheme","chartConfigs","type","width","height","dataFormat","dataSource","chart","caption","subcaption","xaxisname","yaxisname","data","label","value","link","linkeddata","id","linkedchart","rotateValues","plottooltext","Chart","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentVal","renderComplete","bind","assertThisInitialized","handlechange","setState","e","chartType","currentTarget","ResponsiveContainer","ReactFC_default","assign","onRender","className","name","onChange","React","Component","numbersuffix","withStyles","theme","root","flexGrow","paper","padding","spacing","unit","color","palette","text","secondary","margin","paperChart","textAlign","paperHeader","classes","Grid_default","container","xs","md","CardHeader_default","item","Paper_default","ChartBankSampah","ChartNasabah","convertFileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","rawFile","onload","result","onerror","uploadCapableDataProvider","requestHandler","resource","params","pictures","length","formerPictures","filter","File","newPictures","all","map","then","base64Pictures","picture64","src","concat","transformedNewPictures","objectSpread","toConsumableArray","addUploadFeature","jsonServerProvider","createMuiTheme","primary","main","light","contrastText","messages","indonesianMessages","i18nProvider","locale","App","Admin","catchAll","dashboard","Dashboard","dataProvider","Resource","list","icon","UserIcon","CompainesIcon","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e15712d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  List,\r\n  Datagrid,\r\n  EmailField,\r\n  TextField /*,\r\n  SimpleList,\r\n  Responsive*/\r\n} from \"react-admin\";\r\n\r\nexport const UserList = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"username\" />\r\n      <EmailField source=\"email\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","import React from \"react\";\r\nimport { List, Datagrid, TextField } from \"react-admin\";\r\n\r\nexport const CompaniesList = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"description\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport { Title } from \"react-admin\";\r\n\r\nexport default () => (\r\n  <Card>\r\n    <Title title=\"Not Found\" />\r\n    <CardContent>\r\n      <h1>404: Page not found</h1>\r\n    </CardContent>\r\n  </Card>\r\n);\r\n","import React from \"react\";\r\nimport { ResponsiveContainer } from \"recharts\";\r\nimport FusionCharts from \"fusioncharts\";\r\nimport Charts from \"fusioncharts/fusioncharts.charts\";\r\nimport ReactFC from \"react-fusioncharts\";\r\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\r\n// import Select from \"react-select\";\r\n\r\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\r\n\r\nconst chartConfigs = {\r\n  type: \"column2d\",\r\n  width: \"99%\",\r\n  height: 250,\r\n\r\n  dataFormat: \"json\",\r\n  dataSource: {\r\n    // Chart configuration\r\n    chart: {\r\n      caption: \"Jumlah Bank Sampah per Wilayah Besar\",\r\n      subcaption: \"Bulan Ini\",\r\n      xaxisname: \"Wilayah\",\r\n      yaxisname: \"Jumlah\"\r\n      // theme: \"fusion\"\r\n    },\r\n    // Chart data\r\n    data: [\r\n      {\r\n        label: \"Jakarta\",\r\n        value: \"110\",\r\n        link: \"newchart-xml-jakarta\"\r\n      },\r\n      {\r\n        label: \"Bekasi\",\r\n        value: \"140\",\r\n        link: \"newchart-xml-bekasi\"\r\n      },\r\n      {\r\n        label: \"Bogor\",\r\n        value: \"35\",\r\n        link: \"newchart-xml-bogor\"\r\n      }\r\n    ],\r\n    linkeddata: [\r\n      {\r\n        id: \"jakarta\",\r\n        linkedchart: {\r\n          chart: {\r\n            caption: \"Jumlah transaksi sampah -  Wilayah Jakarta\",\r\n            subcaption: \"Bulan Ini\",\r\n            // numberprefix: \"$\",\r\n            // theme: \"fusion\",\r\n            rotateValues: \"0\",\r\n            plottooltext: \"$label, $dataValue\"\r\n          },\r\n          data: [\r\n            {\r\n              label: \"Jakarta Utara\",\r\n              value: \"30\"\r\n              // link: \"newchart-xml-jakartaUtara\"\r\n            },\r\n            {\r\n              label: \"Jakarta Barat\",\r\n              value: \"25\"\r\n            },\r\n            {\r\n              label: \"Jakarta Pusat\",\r\n              value: \"20\"\r\n            },\r\n            {\r\n              label: \"Jakarta Selatan\",\r\n              value: \"9\"\r\n            },\r\n            {\r\n              label: \"Jakarta Timur\",\r\n              value: \"25\"\r\n            },\r\n            {\r\n              label: \"Kepulauan Seribu\",\r\n              value: \"1\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\nclass Chart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      chart: {},\r\n      currentVal: \"column2d\"\r\n    };\r\n\r\n    this.renderComplete = this.renderComplete.bind(this);\r\n    // this.radioHandler = this.radioHandler.bind(this);\r\n    this.handlechange = this.handlechange.bind(this);\r\n  }\r\n\r\n  renderComplete(chart) {\r\n    this.setState({ chart });\r\n  }\r\n\r\n  // Handler for radio buttons to change chart type.\r\n  // radioHandler(e) {\r\n  //   this.state.chart.chartType(e.currentTarget.value);\r\n  //   this.setState({\r\n  //     currentVal: e.currentTarget.value\r\n  //   });\r\n  // }\r\n\r\n  handlechange(e) {\r\n    this.state.chart.chartType(e.currentTarget.value);\r\n    this.setState({\r\n      currentVal: e.currentTarget.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ResponsiveContainer width=\"99%\" height={300}>\r\n        <div>\r\n          <ReactFC {...chartConfigs} onRender={this.renderComplete} />\r\n          <br />\r\n\r\n          <span>Choose a chart type:</span>\r\n          <div className=\"change-type\">\r\n            <div>\r\n              <select\r\n                name=\"chart\"\r\n                value={this.state.currentVal}\r\n                onChange={this.handlechange}\r\n              >\r\n                <option value=\"column2d\">Column Chart</option>\r\n                <option value=\"bar2d\">Bar Chart</option>\r\n                <option value=\"line\">Line Chart</option>\r\n                <option value=\"pie2d\">Pie Chart</option>\r\n              </select>\r\n            </div>\r\n            {/* <span>Choose a chart type:</span>\r\n              <div>\r\n                <select\r\n                  name=\"chart\"\r\n                  value={this.state.currentVal}\r\n                  onChange={this.handlechange}\r\n                >\r\n                  <option value=\"column2d\">Column Chart</option>\r\n                  <option value=\"bar2d\">Bar Chart</option>\r\n                  <option value=\"line\">Line Chart</option>\r\n                  <option value=\"pie2d\">Pie Chart</option>\r\n                </select>\r\n              </div> */}\r\n          </div>\r\n        </div>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport { ResponsiveContainer } from \"recharts\";\r\nimport FusionCharts from \"fusioncharts\";\r\nimport Charts from \"fusioncharts/fusioncharts.charts\";\r\nimport ReactFC from \"react-fusioncharts\";\r\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\r\n// import Select from \"react-select\";\r\n\r\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\r\n\r\nconst chartConfigs = {\r\n  type: \"column2d\",\r\n  width: \"99%\",\r\n  height: 250,\r\n\r\n  dataFormat: \"json\",\r\n  dataSource: {\r\n    // Chart configuration\r\n    chart: {\r\n      caption: \"Jumlah Nasabah per Wilayah Besar\",\r\n      subcaption: \"Bulan Ini\",\r\n      xaxisname: \"Wilayah\",\r\n      yaxisname: \"Jumlah\",\r\n      // theme: \"fusion\"\r\n      numbersuffix: \"k\"\r\n    },\r\n    // Chart data\r\n    data: [\r\n      {\r\n        label: \"Jakarta\",\r\n        value: \"110\",\r\n        link: \"newchart-xml-jakarta\"\r\n      },\r\n      {\r\n        label: \"Bekasi\",\r\n        value: \"140\",\r\n        link: \"newchart-xml-bekasi\"\r\n      },\r\n      {\r\n        label: \"Bogor\",\r\n        value: \"35\",\r\n        link: \"newchart-xml-bogor\"\r\n      }\r\n    ],\r\n    linkeddata: [\r\n      {\r\n        id: \"jakarta\",\r\n        linkedchart: {\r\n          chart: {\r\n            caption: \"Jumlah transaksi sampah -  Wilayah Jakarta\",\r\n            subcaption: \"Bulan Ini\",\r\n            // numberprefix: \"$\",\r\n            // theme: \"fusion\",\r\n            rotateValues: \"0\",\r\n            plottooltext: \"$label, $dataValue\"\r\n          },\r\n          data: [\r\n            {\r\n              label: \"Jakarta Utara\",\r\n              value: \"30\"\r\n              // link: \"newchart-xml-jakartaUtara\"\r\n            },\r\n            {\r\n              label: \"Jakarta Barat\",\r\n              value: \"25\"\r\n            },\r\n            {\r\n              label: \"Jakarta Pusat\",\r\n              value: \"20\"\r\n            },\r\n            {\r\n              label: \"Jakarta Selatan\",\r\n              value: \"9\"\r\n            },\r\n            {\r\n              label: \"Jakarta Timur\",\r\n              value: \"25\"\r\n            },\r\n            {\r\n              label: \"Kepulauan Seribu\",\r\n              value: \"1\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\nclass Chart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      chart: {},\r\n      currentVal: \"column2d\"\r\n    };\r\n\r\n    this.renderComplete = this.renderComplete.bind(this);\r\n    // this.radioHandler = this.radioHandler.bind(this);\r\n    this.handlechange = this.handlechange.bind(this);\r\n  }\r\n\r\n  renderComplete(chart) {\r\n    this.setState({ chart });\r\n  }\r\n\r\n  // Handler for radio buttons to change chart type.\r\n  // radioHandler(e) {\r\n  //   this.state.chart.chartType(e.currentTarget.value);\r\n  //   this.setState({\r\n  //     currentVal: e.currentTarget.value\r\n  //   });\r\n  // }\r\n\r\n  handlechange(e) {\r\n    this.state.chart.chartType(e.currentTarget.value);\r\n    this.setState({\r\n      currentVal: e.currentTarget.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ResponsiveContainer width=\"99%\" height={300}>\r\n        <div>\r\n          <ReactFC {...chartConfigs} onRender={this.renderComplete} />\r\n          <br />\r\n\r\n          <span>Choose a chart type:</span>\r\n          <div className=\"change-type\">\r\n            <div>\r\n              <select\r\n                name=\"chart\"\r\n                value={this.state.currentVal}\r\n                onChange={this.handlechange}\r\n              >\r\n                <option value=\"column2d\">Column Chart</option>\r\n                <option value=\"bar2d\">Bar Chart</option>\r\n                <option value=\"line\">Line Chart</option>\r\n                <option value=\"pie2d\">Pie Chart</option>\r\n              </select>\r\n            </div>\r\n            {/* <span>Choose a chart type:</span>\r\n              <div>\r\n                <select\r\n                  name=\"chart\"\r\n                  value={this.state.currentVal}\r\n                  onChange={this.handlechange}\r\n                >\r\n                  <option value=\"column2d\">Column Chart</option>\r\n                  <option value=\"bar2d\">Bar Chart</option>\r\n                  <option value=\"line\">Line Chart</option>\r\n                  <option value=\"pie2d\">Pie Chart</option>\r\n                </select>\r\n              </div> */}\r\n          </div>\r\n        </div>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import ResponsiveContainer from \"recharts\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n// import BarChart from \"./components/BarChart\";\r\n// import SimpleLineChart from \"./components/SimpleLineChart\";\r\n// import SyncChart from \"./components/SyncChart\";\r\n// import PieCharts from \"./components/PieChart\";\r\nimport ChartBank from \"./ChartBankSampah\";\r\nimport ChartNasabah from \"./ChartNasabah\";\r\n// import { CardContent } from \"@material-ui/core\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  paper: {\r\n    padding: theme.spacing.unit * 2,\r\n    // textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n    margin: 2\r\n  },\r\n  paperChart: {\r\n    padding: theme.spacing.unit * 2,\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary\r\n  },\r\n  paperHeader: {\r\n    padding: theme.spacing.unit * 1.5,\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary\r\n  }\r\n});\r\n\r\nfunction CenteredGrid(props) {\r\n  const { classes } = props;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={20}>\r\n        <Grid xs={12} md={12} className={classes.paperHeader}>\r\n          <Card>\r\n            <CardHeader title=\"Welcome to TAMPAH Admin\" />\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={6}>\r\n          <Paper className={classes.paper}>\r\n            <ChartBank />\r\n            {/* <BarChart /> */}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={6}>\r\n          <Paper className={classes.paper}>\r\n            <ChartNasabah />\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* <Grid item xs={12}>\r\n          <Paper className={classes.paper}>\r\n            Data Transaksi Tampah Nasabah <SimpleLineChart />{\" \"}\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={5}>\r\n          <Paper className={classes.paper}>\r\n            Data sampah Nasabah <BarChart />\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={7}>\r\n          <Paper className={classes.paper}>\r\n            Data Penjualan sampah di Bank sampah\r\n            <SyncChart />\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Paper className={classes.paper}>\r\n            Data Pengguna Aplikasi Tampah Nasabah\r\n            <PieCharts />\r\n          </Paper>\r\n        </Grid> */}\r\n        {/* <Grid item xs={5}>\r\n          <Paper className={classes.paper}>Data (9)</Paper>\r\n        </Grid> */}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nCenteredGrid.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(CenteredGrid);\r\n","// in addUploadFeature.js\r\n/**\r\n * Convert a `File` object returned by the upload input into a base 64 string.\r\n * That's not the most optimized way to store images in production, but it's\r\n * enough to illustrate the idea of data provider decoration.\r\n */\r\nconst convertFileToBase64 = file =>\r\n  new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file.rawFile);\r\n\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = reject;\r\n  });\r\n\r\n/**\r\n * For posts update only, convert uploaded image in base 64 and attach it to\r\n * the `picture` sent property, with `src` and `title` attributes.\r\n */\r\n\r\nconst addUploadFeature = requestHandler => (type, resource, params) => {\r\n  if (type === \"UPDATE\" && resource === \"posts\") {\r\n    if (params.data.pictures && params.data.pictures.length) {\r\n      // only freshly dropped pictures are instance of File\r\n      const formerPictures = params.data.pictures.filter(\r\n        (params.rawFile = !(params instanceof File))\r\n      );\r\n      const newPictures = params.data.pictures.filter(\r\n        (params.rawFile = params instanceof File)\r\n      );\r\n\r\n      return Promise.all(newPictures.map(convertFileToBase64))\r\n        .then(base64Pictures =>\r\n          base64Pictures.map(picture64 => ({\r\n            src: picture64,\r\n            title: `${params.data.title}`\r\n          }))\r\n        )\r\n        .then(transformedNewPictures =>\r\n          requestHandler(type, resource, {\r\n            ...params,\r\n            data: {\r\n              ...params.data,\r\n              pictures: [...transformedNewPictures, ...formerPictures]\r\n            }\r\n          })\r\n        );\r\n    }\r\n  }\r\n\r\n  // for other request types and resources, fall back to the default request handler\r\n  return requestHandler(type, resource, params);\r\n};\r\n\r\nexport default addUploadFeature;\r\n","import React from \"react\";\r\nimport { Admin, Resource /*fetchUtils*/ } from \"react-admin\";\r\nimport jsonServerProvider from \"ra-data-json-server\";\r\n// import simpleRestProvider from \"ra-data-simple-rest\";\r\n\r\nimport { UserList } from \"./UserList\";\r\nimport { CompaniesList } from \"./companies\";\r\n// import { CommentList } from \"./comments\";\r\nimport NotFound from \"./NotFound\";\r\nimport UserIcon from \"@material-ui/icons/Group\";\r\nimport CompainesIcon from \"@material-ui/icons/AccountBalance\";\r\nimport Dashboard from \"./Dashboard\";\r\n\r\n// import authProvider from \"./authProvider\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport indonesianMessages from \"ra-language-indonesian\";\r\n// import NasabahList from \"./NasabahList\";\r\n// import ListBank from \"./TampahBank\";\r\nimport addUploadFeature from \"./addUploadFeature\";\r\n// import QRCode from \"qrcode.react\";\r\n// import Example from \"./Example\";\r\n\r\n// import SimpleLineChart from \"./components/SimpleLineChart\";\r\n\r\n// const httpClient = (url, options = {}) => {\r\n//   if (!options.headers) {\r\n//     options.headers = new Headers({ Accept: \"application/json\" });\r\n//   }\r\n//   // add your own headers here\r\n//   options.headers.set(\"X-Custom-Header\", \"foobar\");\r\n//   return fetchUtils.fetchJson(url, options);\r\n// };\r\n// const dataProvider = jsonServerProvider(\"http://jsonplaceholder.typicode.com\");\r\nconst dataProvider = jsonServerProvider(\r\n  \"https://my-json-server.typicode.com/dickyputra09/json-server\"\r\n  //\"http://localhost:3000\"\r\n);\r\n// const dataProvider = simpleRestProvider(\"http://path.to.my.api/\", httpClient);\r\nconst uploadCapableDataProvider = addUploadFeature(dataProvider);\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      // light: will be calculated from palette.primary.main,\r\n      main: \"#0044ff\"\r\n      // dark: will be calculated from palette.primary.main,\r\n      // contrastText: will be calculated to contrast with palette.primary.main\r\n    },\r\n    secondary: {\r\n      light: \"#0066ff\",\r\n      main: \"#0044ff\",\r\n      // dark: will be calculated from palette.secondary.main,\r\n      contrastText: \"#ffffff\"\r\n    }\r\n  }\r\n});\r\nconst messages = {\r\n  id: indonesianMessages\r\n};\r\nconst i18nProvider = locale => messages[locale];\r\nconst App = () => (\r\n  <Admin\r\n    locale=\"id\"\r\n    i18nProvider={i18nProvider}\r\n    theme={theme}\r\n    catchAll={NotFound}\r\n    dashboard={Dashboard}\r\n    // authProvider={authProvider}\r\n    dataProvider={uploadCapableDataProvider}\r\n  >\r\n    <Resource name=\"customer\" list={UserList} icon={UserIcon} />\r\n    {/* <Resource name=\"user\" list={UserList} icon={UserIcon} /> */}\r\n    <Resource name=\"bank\" list={CompaniesList} icon={CompainesIcon} />\r\n    {/* <Resource name=\"tampahnasabah\" list={NasabahList} icon={UserIcon} /> */}\r\n    {/* <Resource name=\"tampahbank\" list={ListBank} icon={CompainesIcon} /> */}\r\n    {/* <Resource name=\"comments\" list={CommentList} /> */}\r\n  </Admin>\r\n);\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}