{"version":3,"sources":["UserList.js","ChartBankSampah.js","ChartNasabah.js","Dashboard.js","BankList.js","App.js","serviceWorker.js","index.js"],"names":["Customer","props","react_default","a","createElement","List","Datagrid","TextField","source","EmailField","ReactFC","fcRoot","FusionCharts","Charts","FusionTheme","Column2D","Bar2D","Line2D","Pie2D","chartConfigs","type","width","height","dataFormat","dataSource","chart","caption","subcaption","xaxisname","yaxisname","data","label","value","link","linkeddata","id","linkedchart","rotateValues","plottooltext","Chart","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentVal","renderComplete","bind","assertThisInitialized","handlechange","setState","e","chartType","currentTarget","ResponsiveContainer","ReactFC_default","assign","onRender","className","name","onChange","React","Component","numbersuffix","withStyles","theme","root","flexGrow","paper","padding","spacing","unit","color","palette","text","secondary","margin","paperChart","textAlign","paperHeader","classes","Grid_default","container","item","xs","md","Paper_default","ChartBankSampah","ChartNasabah","Bank","createMuiTheme","primary","main","light","contrastText","dataProvider","jsonServerProvider","App","Admin","dashboard","Dashboard","Resource","list","icon","CustomerIcon","BankIcon","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f45b4661.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { List, Datagrid, TextField, EmailField } from \"react-admin\";\r\n\r\nconst Customer = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"username\" />\r\n      <EmailField source=\"email\" />\r\n      <TextField source=\"age\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport default Customer;\r\n","import React from \"react\";\r\nimport { ResponsiveContainer } from \"recharts\";\r\nimport FusionCharts from \"fusioncharts/core\";\r\nimport Charts from \"fusioncharts/fusioncharts.charts\";\r\nimport ReactFC from \"react-fusioncharts\";\r\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\r\nimport Column2D from \"fusioncharts/viz/column2d\";\r\nimport Pie2D from \"fusioncharts/viz/pie2d\";\r\nimport Bar2D from \"fusioncharts/viz/bar2d\";\r\nimport Line2D from \"fusioncharts/viz/line\";\r\n// import Select from \"react-select\";\r\n\r\nReactFC.fcRoot(\r\n  FusionCharts,\r\n  Charts,\r\n  FusionTheme,\r\n  Column2D,\r\n  Bar2D,\r\n  Line2D,\r\n  Pie2D\r\n);\r\n\r\nconst chartConfigs = {\r\n  type: \"column2d\",\r\n  width: \"99%\",\r\n  height: 250,\r\n\r\n  dataFormat: \"json\",\r\n  dataSource: {\r\n    // Chart configuration\r\n    chart: {\r\n      caption: \"Jumlah Bank Sampah per Wilayah Besar\",\r\n      subcaption: \"Bulan Ini\",\r\n      xaxisname: \"Wilayah\",\r\n      yaxisname: \"Jumlah\"\r\n      // theme: \"fusion\"\r\n    },\r\n    // Chart data\r\n    data: [\r\n      {\r\n        label: \"Jakarta\",\r\n        value: \"110\",\r\n        link: \"newchart-xml-jakarta\"\r\n      },\r\n      {\r\n        label: \"Bekasi\",\r\n        value: \"140\",\r\n        link: \"newchart-xml-bekasi\"\r\n      },\r\n      {\r\n        label: \"Bogor\",\r\n        value: \"35\",\r\n        link: \"newchart-xml-bogor\"\r\n      }\r\n    ],\r\n    linkeddata: [\r\n      {\r\n        id: \"jakarta\",\r\n        linkedchart: {\r\n          chart: {\r\n            caption: \"Jumlah transaksi sampah -  Wilayah Jakarta\",\r\n            subcaption: \"Bulan Ini\",\r\n            // numberprefix: \"$\",\r\n            // theme: \"fusion\",\r\n            rotateValues: \"0\",\r\n            plottooltext: \"$label, $dataValue\"\r\n          },\r\n          data: [\r\n            {\r\n              label: \"Jakarta Utara\",\r\n              value: \"30\"\r\n              // link: \"newchart-xml-jakartaUtara\"\r\n            },\r\n            {\r\n              label: \"Jakarta Barat\",\r\n              value: \"25\"\r\n            },\r\n            {\r\n              label: \"Jakarta Pusat\",\r\n              value: \"20\"\r\n            },\r\n            {\r\n              label: \"Jakarta Selatan\",\r\n              value: \"9\"\r\n            },\r\n            {\r\n              label: \"Jakarta Timur\",\r\n              value: \"25\"\r\n            },\r\n            {\r\n              label: \"Kepulauan Seribu\",\r\n              value: \"1\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\nclass Chart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      chart: {},\r\n      currentVal: { Column2D }\r\n    };\r\n\r\n    this.renderComplete = this.renderComplete.bind(this);\r\n    // this.radioHandler = this.radioHandler.bind(this);\r\n    this.handlechange = this.handlechange.bind(this);\r\n  }\r\n\r\n  renderComplete(chart) {\r\n    this.setState({ chart });\r\n  }\r\n\r\n  // Handler for radio buttons to change chart type.\r\n\r\n  handlechange(e) {\r\n    this.state.chart.chartType(e.currentTarget.value);\r\n    this.setState({\r\n      currentVal: e.currentTarget.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ResponsiveContainer width=\"99%\" height={300}>\r\n        <div>\r\n          <ReactFC {...chartConfigs} onRender={this.renderComplete} />\r\n          <br />\r\n\r\n          <span>Choose a chart type:</span>\r\n          <div className=\"change-type\">\r\n            <div>\r\n              <select\r\n                name=\"chart\"\r\n                value={this.state.currentVal}\r\n                onChange={this.handlechange}\r\n              >\r\n                <option value=\"column2d\">Column Chart</option>\r\n                <option value=\"bar2d\">Bar Chart</option>\r\n                <option value=\"line\">Line Chart</option>\r\n                <option value=\"pie2d\">Pie Chart</option>\r\n              </select>\r\n            </div>\r\n            {/* <span>Choose a chart type:</span>\r\n              <div>\r\n                <select\r\n                  name=\"chart\"\r\n                  value={this.state.currentVal}\r\n                  onChange={this.handlechange}\r\n                >\r\n                  <option value=\"column2d\">Column Chart</option>\r\n                  <option value=\"bar2d\">Bar Chart</option>\r\n                  <option value=\"line\">Line Chart</option>\r\n                  <option value=\"pie2d\">Pie Chart</option>\r\n                </select>\r\n              </div> */}\r\n          </div>\r\n        </div>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport { ResponsiveContainer } from \"recharts\";\r\nimport FusionCharts from \"fusioncharts\";\r\nimport Charts from \"fusioncharts/fusioncharts.charts\";\r\nimport ReactFC from \"react-fusioncharts\";\r\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\r\n// import Select from \"react-select\";\r\n\r\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\r\n\r\nconst chartConfigs = {\r\n  type: \"column2d\",\r\n  width: \"99%\",\r\n  height: 250,\r\n\r\n  dataFormat: \"json\",\r\n  dataSource: {\r\n    // Chart configuration\r\n    chart: {\r\n      caption: \"Jumlah Nasabah per Wilayah Besar\",\r\n      subcaption: \"Bulan Ini\",\r\n      xaxisname: \"Wilayah\",\r\n      yaxisname: \"Jumlah\",\r\n      // theme: \"fusion\"\r\n      numbersuffix: \"k\"\r\n    },\r\n    // Chart data\r\n    data: [\r\n      {\r\n        label: \"Jakarta\",\r\n        value: \"110\",\r\n        link: \"newchart-xml-jakarta\"\r\n      },\r\n      {\r\n        label: \"Bekasi\",\r\n        value: \"140\",\r\n        link: \"newchart-xml-bekasi\"\r\n      },\r\n      {\r\n        label: \"Bogor\",\r\n        value: \"35\",\r\n        link: \"newchart-xml-bogor\"\r\n      }\r\n    ],\r\n    linkeddata: [\r\n      {\r\n        id: \"jakarta\",\r\n        linkedchart: {\r\n          chart: {\r\n            caption: \"Jumlah transaksi sampah -  Wilayah Jakarta\",\r\n            subcaption: \"Bulan Ini\",\r\n            // numberprefix: \"$\",\r\n            // theme: \"fusion\",\r\n            rotateValues: \"0\",\r\n            plottooltext: \"$label, $dataValue\"\r\n          },\r\n          data: [\r\n            {\r\n              label: \"Jakarta Utara\",\r\n              value: \"30\"\r\n              // link: \"newchart-xml-jakartaUtara\"\r\n            },\r\n            {\r\n              label: \"Jakarta Barat\",\r\n              value: \"25\"\r\n            },\r\n            {\r\n              label: \"Jakarta Pusat\",\r\n              value: \"20\"\r\n            },\r\n            {\r\n              label: \"Jakarta Selatan\",\r\n              value: \"9\"\r\n            },\r\n            {\r\n              label: \"Jakarta Timur\",\r\n              value: \"25\"\r\n            },\r\n            {\r\n              label: \"Kepulauan Seribu\",\r\n              value: \"1\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\nclass Chart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      chart: {},\r\n      currentVal: \"column2d\"\r\n    };\r\n\r\n    this.renderComplete = this.renderComplete.bind(this);\r\n    // this.radioHandler = this.radioHandler.bind(this);\r\n    this.handlechange = this.handlechange.bind(this);\r\n  }\r\n\r\n  renderComplete(chart) {\r\n    this.setState({ chart });\r\n  }\r\n\r\n  // Handler for radio buttons to change chart type.\r\n  // radioHandler(e) {\r\n  //   this.state.chart.chartType(e.currentTarget.value);\r\n  //   this.setState({\r\n  //     currentVal: e.currentTarget.value\r\n  //   });\r\n  // }\r\n\r\n  handlechange(e) {\r\n    this.state.chart.chartType(e.currentTarget.value);\r\n    this.setState({\r\n      currentVal: e.currentTarget.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ResponsiveContainer width=\"99%\" height={300}>\r\n        <div>\r\n          <ReactFC {...chartConfigs} onRender={this.renderComplete} />\r\n          <br />\r\n\r\n          <span>Choose a chart type:</span>\r\n          <div className=\"change-type\">\r\n            <div>\r\n              <select\r\n                name=\"chart\"\r\n                value={this.state.currentVal}\r\n                onChange={this.handlechange}\r\n              >\r\n                <option value=\"column2d\">Column Chart</option>\r\n                <option value=\"bar2d\">Bar Chart</option>\r\n                <option value=\"line\">Line Chart</option>\r\n                <option value=\"pie2d\">Pie Chart</option>\r\n              </select>\r\n            </div>\r\n            {/* <span>Choose a chart type:</span>\r\n              <div>\r\n                <select\r\n                  name=\"chart\"\r\n                  value={this.state.currentVal}\r\n                  onChange={this.handlechange}\r\n                >\r\n                  <option value=\"column2d\">Column Chart</option>\r\n                  <option value=\"bar2d\">Bar Chart</option>\r\n                  <option value=\"line\">Line Chart</option>\r\n                  <option value=\"pie2d\">Pie Chart</option>\r\n                </select>\r\n              </div> */}\r\n          </div>\r\n        </div>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import ResponsiveContainer from \"recharts\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n// import Card from \"@material-ui/core/Card\";\r\n// import CardHeader from \"@material-ui/core/CardHeader\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n// import BarChart from \"./components/BarChart\";\r\n// import SimpleLineChart from \"./components/SimpleLineChart\";\r\n// import SyncChart from \"./components/SyncChart\";\r\n// import PieCharts from \"./components/PieChart\";\r\nimport ChartBank from \"./ChartBankSampah\";\r\nimport ChartNasabah from \"./ChartNasabah\";\r\n// import { CardContent } from \"@material-ui/core\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  paper: {\r\n    padding: theme.spacing.unit * 2,\r\n    // textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n    margin: 2\r\n  },\r\n  paperChart: {\r\n    padding: theme.spacing.unit * 2,\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary\r\n  },\r\n  paperHeader: {\r\n    padding: theme.spacing.unit * 1.5,\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary\r\n  }\r\n});\r\n\r\nfunction CenteredGrid(props) {\r\n  const { classes } = props;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={20}>\r\n        {/* <Grid xs={12} md={12} className={classes.paperHeader}>\r\n          <Card>\r\n            <CardHeader title=\"Welcome to TAMPAH Admin\" />\r\n          </Card>\r\n        </Grid> */}\r\n\r\n        <Grid item xs={12} md={6}>\r\n          <Paper className={classes.paper}>\r\n            <ChartBank />\r\n            {/* <BarChart /> */}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={6}>\r\n          <Paper className={classes.paper}>\r\n            <ChartNasabah />\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* <Grid item xs={12}>\r\n          <Paper className={classes.paper}>\r\n            Data Transaksi Tampah Nasabah <SimpleLineChart />{\" \"}\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={5}>\r\n          <Paper className={classes.paper}>\r\n            Data sampah Nasabah <BarChart />\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={7}>\r\n          <Paper className={classes.paper}>\r\n            Data Penjualan sampah di Bank sampah\r\n            <SyncChart />\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <Paper className={classes.paper}>\r\n            Data Pengguna Aplikasi Tampah Nasabah\r\n            <PieCharts />\r\n          </Paper>\r\n        </Grid> */}\r\n        {/* <Grid item xs={5}>\r\n          <Paper className={classes.paper}>Data (9)</Paper>\r\n        </Grid> */}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nCenteredGrid.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(CenteredGrid);\r\n","import React from \"react\";\r\nimport { List, Datagrid, TextField } from \"react-admin\";\r\n\r\nconst Bank = props => (\r\n  <List {...props}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"description\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport default Bank;\r\n","import React from \"react\";\nimport { Admin, Resource } from \"react-admin\";\nimport jsonServerProvider from \"ra-data-json-server\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport CustomerIcon from \"@material-ui/icons/Group\";\nimport BankIcon from \"@material-ui/icons/AccountBalance\";\nimport Customer from \"./UserList\";\nimport Dashboard from \"./Dashboard\";\nimport Bank from \"./BankList\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: \"#ff4400\"\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: \"#0066ff\",\n      main: \"#0044ff\",\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: \"#ffffff\"\n    }\n    // error: will use the default color\n  }\n});\n\nconst dataProvider = jsonServerProvider(\n  \"https://my-json-server.typicode.com/dickyputra09/json-server\"\n);\n\nconst App = () => (\n  <Admin theme={theme} dataProvider={dataProvider} dashboard={Dashboard}>\n    <Resource name=\"customer\" list={Customer} icon={CustomerIcon} />\n    <Resource name=\"bank\" list={Bank} icon={BankIcon} />\n  </Admin>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}